version: 3

vars:
  YELLOW: \033[33m
  RESET: \033[0;0m
  setup_tmp:
    sh: mkdir -p tmp && echo tmp
  out: tmp/out.csv
  show_cnt: 16
  translation: nwt
  translations: asv kj21 nwt
  TMP_DIR:
    sh: mkdir -p "data/tmp" && echo "data/tmp"
  INPUT_DIR: "data/input"
  OUTPUT_DIR: "data/output"
  entities_csv_file: "{{.OUTPUT_DIR}}/{{.translation}}_entities.csv"
  entities_json_file: "{{.OUTPUT_DIR}}/{{.translation}}_entities.json"
  bible_data_json: "{{.INPUT_DIR}}/{{.translation}}_bible.json"
  bible_data_csv: "{{.INPUT_DIR}}/{{.translation}}_bible.csv"
  BOOKS: |
    Genesis
    Exodus
    Leviticus
    Numbers
    Deuteronomy
    Joshua
    Judges
    Ruth
    1 Samuel
    2 Samuel
    1 Kings
    2 Kings
    1 Chronicles
    2 Chronicles
    Ezra
    Nehemiah
    Esther
    Job
    Psalms
    Proverbs
    Ecclesiastes
    Song of Solomon
    Isaiah
    Jeremiah
    Lamentations
    Ezekiel
    Daniel
    Hosea
    Joel
    Amos
    Obadiah
    Jonah
    Micah
    Nahum
    Habakkuk
    Zephaniah
    Haggai
    Zechariah
    Malachi
    Matthew
    Mark
    Luke
    John
    Acts
    Romans
    1 Corinthians
    2 Corinthians
    Galatians
    Ephesians
    Philippians
    Colossians
    1 Thessalonians
    2 Thessalonians
    1 Timothy
    2 Timothy
    Titus
    Philemon
    Hebrews
    James
    1 Peter
    2 Peter
    1 John
    2 John
    3 John
    Jude
    Revelation
  CHAPTERS: |
    Genesis:50
    Exodus:40
    Leviticus:27
    Numbers:36
    Deuteronomy:34
    Joshua:24
    Judges:21
    Ruth:4
    1 Samuel:31
    2 Samuel:24
    1 Kings:22
    2 Kings:25
    1 Chronicles:29
    2 Chronicles:36
    Ezra:10
    Nehemiah:13
    Esther:10
    Job:42
    Psalms:150
    Proverbs:31
    Ecclesiastes:12
    Song of Solomon:8
    Isaiah:66
    Jeremiah:52
    Lamentations:5
    Ezekiel:48
    Daniel:12
    Hosea:14
    Joel:3
    Amos:9
    Obadiah:1
    Jonah:4
    Micah:7
    Nahum:3
    Habakkuk:3
    Zephaniah:3
    Haggai:2
    Zechariah:14
    Malachi:4
    Matthew:28
    Mark:16
    Luke:24
    John:21
    Acts:28
    Romans:16
    1 Corinthians:16
    2 Corinthians:13
    Galatians:6
    Ephesians:6
    Philippians:4
    Colossians:4
    1 Thessalonians:5
    2 Thessalonians:3
    1 Timothy:6
    2 Timothy:4
    Titus:3
    Philemon:1
    Hebrews:13
    James:5
    1 Peter:5
    2 Peter:3
    1 John:5
    2 John:1
    3 John:1
    Jude:1
    Revelation:22
  # merged from other taskfile - needs cleanup
  COMMA_PAT: '
    s/\([0-9]\),\([0-9]\)/\1\2/g;
    s/,/ /g
    '
  SPACE_PAT: "s/Â / /g; s/;/ /g; s/[[:space:]][[:space:]]*/ /g; s/ $//g"
  SEMICOLON_PAT: "s/;/ /g"
  PLAIN_BASE_DIR: ../newWorldTranslation/english/2013-release-plain-text
  RAW_BASE_DIR: ../newWorldTranslation/english/2013-release
  FILE_PAT: "{{.PLAIN_BASE_DIR}}/*/*"
  # ! merged from other taskfile - needs cleanup

tasks:
  default: task -a

  test:
    cmds:
      - task search -- 'word of god'
      - task ref -- genesis 1:1
      - task: convert_2_csv
      - task: extract_translations
      - task ref-all -- genesis 1:1
      - task ref-multi -- genesis 1:1
      # - task: tag-entities

  project-structure:
    cmds:
      - |
        tree  . \
          -I bin -I local -I __pycache__ -I tmp -I docs \
          -I go.sum -I go.mod

  link-data:
    desc: link bible.json generated by bible-text repo
    cmds:
      - |
        # NOTE: bible-text repo: github.com:GenesisInc/bible-text.git
        ln -sfn ../../../bible-text/data/tmp/nwt_bible.json data/input/.
        ln -sfn ../../../bible-text/data/tmp/multi_translation.json data/input/.

  tag-entities-sample:
    aliases:
      - es
    cmds:
      - |
        uv run main.py \
          tag-entities \
          --input-file "{{.bible_data_json}}" \
          --output-json "{{.entities_json_file}}" \
          --output-csv "{{.entities_csv_file}}" \
          --books john \
          --translation "{{.translation}}"

  nlp-tag:
    aliases:
      - tag-entities
    desc: tag entities in a translation into 2 output files        ... task nlp-tag -- nwt
    cmds:
      - |
        if [[ ! -f "{{.INPUT_DIR}}/{{.CLI_ARGS| default .translation}}_bible.json" ]]; then
          echo "file {{.INPUT_DIR}}/{{.CLI_ARGS| default .translation}}_bible.json not found, exiting. Try task extract_translations"
          exit 1
        fi
        uv run main.py \
          tag-entities \
          --input-file "{{.INPUT_DIR}}/{{.CLI_ARGS| default .translation}}_bible.json" \
          --output-json "{{.OUTPUT_DIR}}/{{.CLI_ARGS| default .translation}}_entities.json" \
          --output-csv "{{.OUTPUT_DIR}}/{{.CLI_ARGS| default .translation}}_entities.csv" \
          --translation "{{.CLI_ARGS| default .translation}}"
      - task: verify-nlp-tag

  verify-nlp-tag:
    cmds:
      - |
        wc -l "{{.OUTPUT_DIR}}/{{.CLI_ARGS| default .translation}}_entities.json" \
          "{{.OUTPUT_DIR}}/{{.CLI_ARGS| default .translation}}_entities.csv"

  verify_convert_2_csv:
    cmds:
      - |
        wc -l {{.OUTPUT_DIR}}/nwt_bible.csv {{.OUTPUT_DIR}}/asv_bible.csv {{.OUTPUT_DIR}}/kj21_bible.csv

  convert_2_csv:
    silent: true
    cmds:
      - |
        # convert nwt_bible.json to nwt_bible.csv
        if [[ ! -f {{.OUTPUT_DIR}}/nwt_bible.json ]] ; then
          echo "file not found: {{.OUTPUT_DIR}}/nwt_bible.json"
          echo -e "you may need to run below dependent jobs: \n\t1. load-bibles \n\t2. extract-translation "
          exit 1
        fi
        jq -r '
          .nwt | to_entries[] as $book_entry
          | $book_entry.value | to_entries[] as $chapter_entry
          | $chapter_entry.value | to_entries[] as $verse_entry
          | [$book_entry.key, $chapter_entry.key, $verse_entry.key, $verse_entry.value] | @csv
        ' {{.OUTPUT_DIR}}/nwt_bible.json > {{.OUTPUT_DIR}}/nwt_bible.csv
        echo "generated {{.OUTPUT_DIR}}/nwt_bible.csv"

        # convert asv_bible.json to asv_bible.csv
        if [[ ! -f {{.OUTPUT_DIR}}/asv_bible.json ]]; then
          echo "file not found: {{.OUTPUT_DIR}}/asv_bible.json"
          echo -e "you may need to run below dependent jobs: \n\t1. load-bibles \n\t2. extract-translation "
          exit 1
        fi
        jq -r '
          .asv | to_entries[] as $book_entry
          | $book_entry.value | to_entries[] as $chapter_entry
          | $chapter_entry.value | to_entries[] as $verse_entry
          | [$book_entry.key, $chapter_entry.key, $verse_entry.key, $verse_entry.value] | @csv
        ' {{.OUTPUT_DIR}}/asv_bible.json > {{.OUTPUT_DIR}}/asv_bible.csv
        echo "generated {{.OUTPUT_DIR}}/asv_bible.csv"

        # convert kj21_bible.json to kj21_bible.csv
        if [[ ! -f {{.OUTPUT_DIR}}/kj21_bible.json ]]; then
          echo "file not found: {{.OUTPUT_DIR}}/kj21_bible.json"
          echo -e "you may need to run below dependent jobs: \n\t1. load-bibles \n\t2. extract-translation "
          exit 1
        fi
        jq -r '
          .kj21 | to_entries[] as $book_entry
          | $book_entry.value | to_entries[] as $chapter_entry
          | $chapter_entry.value | to_entries[] as $verse_entry
          | [$book_entry.key, $chapter_entry.key, $verse_entry.key, $verse_entry.value] | @csv
        ' {{.OUTPUT_DIR}}/kj21_bible.json > {{.OUTPUT_DIR}}/kj21_bible.csv
        echo "generated {{.OUTPUT_DIR}}/kj21_bible.csv"
      - task: verify_convert_2_csv

  verify_extract_translations:
    cmds:
      - |
        wc -l {{.OUTPUT_DIR}}/asv_bible.json {{.OUTPUT_DIR}}/kj21_bible.json \
          {{.OUTPUT_DIR}}/nwt_bible.json {{.OUTPUT_DIR}}/ojb_bible.json

  extract_translations:
    cmds:
      - |
        # extract asv
        uv run python3 main.py extract-translation --translation "asv" \
          --input-file {{.INPUT_DIR}}/multi_translation.json \
          --output-file {{.OUTPUT_DIR}}/asv_bible.json

        # extract kj21
        uv run python3 main.py extract-translation --translation "kj21" \
          --input-file {{.INPUT_DIR}}/multi_translation.json \
          --output-file {{.OUTPUT_DIR}}/kj21_bible.json

        # extract nwt
        uv run python3 main.py extract-translation --translation "nwt" \
          --input-file {{.INPUT_DIR}}/multi_translation.json \
          --output-file {{.OUTPUT_DIR}}/nwt_bible.json

        # extract ojb
        uv run python3 main.py extract-translation --translation "ojb" \
          --input-file {{.INPUT_DIR}}/multi_translation.json \
          --output-file {{.OUTPUT_DIR}}/ojb_bible.json
      - task: verify_extract_translations

  verify-extracted-json:
    cmds:
      - |
        printf "number of books: "
        jq 'keys | length' {{.INPUT_DIR}}/multi_translation.json

        # printf "books:"
        # jq 'keys' {{.INPUT_DIR}}/multi_translation.json

        printf "chapters in book, 3 john:  "
        jq '."3 john" | keys | length' {{.INPUT_DIR}}/multi_translation.json
        printf "chapters in book, Genesis: "
        jq '.genesis | keys | length' {{.INPUT_DIR}}/multi_translation.json

        printf "verses in a chapter, 3 John 1: "
        jq '."3 john"."1" | keys | length' {{.INPUT_DIR}}/multi_translation.json

        # printf "verses from chapter, 3 John 1:"
        # jq '."3 john"."1" | keys' {{.INPUT_DIR}}/multi_translation.json

        printf "total verses in bible: "
        jq 'to_entries | map(.value | to_entries | map(.value | to_entries | length) | add) | add' {{.INPUT_DIR}}/multi_translation.json

        printf "Consistency of a Specific Verse"
        jq '."3 john"."1"."1"' {{.INPUT_DIR}}/multi_translation.json

        printf "find null entries:"
        jq 'to_entries | map(select(.value | to_entries | map(select(.value | to_entries | map(select(.value == null or .value == [])) | length > 0)) | length > 0))' {{.INPUT_DIR}}/multi_translation.json

  uv-sync:
    cmds:
      - |
        uv sync
        uv run python3 -m spacy download en_core_web_sm

  ref:
    silent: true
    desc: refs from one or more transalations                      ... task ref -- genesis 1:1-1:4 __OR__ task translation=ojb ref -- genesis 1:1-4
    cmds:
      - |
        printf "%-5s: " {{.translation}}
        uv run python3 main.py extract-reference \
          --input-file {{.INPUT_DIR}}/{{.translation}}_bible.json \
          --translation {{.translation}} \
          --reference "{{.CLI_ARGS}}"

  ref-all:
    silent: true
    desc: refs from one or more transalations                      ... task ref -- genesis 1:1-1:4
    cmds:
      - for: { var: translations }
        cmd: |
          printf "%-5s: " {{.ITEM}}
          uv run python3 main.py extract-reference \
            --input-file {{.OUTPUT_DIR}}/{{.ITEM}}_bible.json \
            --translation {{.ITEM}} \
            --reference "{{.CLI_ARGS}}"

  ref-multi:
    silent: true
    desc: refs from one or more transalations                      ... task ref-multi -- genesis 1:1
    cmds:
      - |
        BOOK=$(echo "{{.CLI_ARGS}}" | awk '{print tolower($1)}')    # Extract book name (e.g., genesis)
        CHAPTER=$(echo "{{.CLI_ARGS}}" | awk '{print $2}' | cut -d':' -f1)  # Extract chapter
        VERSE=$(echo "{{.CLI_ARGS}}" | awk '{print $2}' | cut -d':' -f2)    # Extract verse

        # Use jq to extract the specific reference
        jq -r --arg book "$BOOK" --arg chapter "$CHAPTER" --arg verse "$VERSE" \
          '.[$book][$chapter][$verse]' data/input/multi_translation.json

  search:
    # silent: true
    desc: find top 5 matches for a string/phrase                   ... task search -- Jesus __OR__ task translation=ojb search -- 'word of god'
    cmds:
      - |
        uv run python3 main.py search --phrase {{.CLI_ARGS}} \
          --input-file "{{.INPUT_DIR}}/{{.translation}}_bible.json" \
          --top-n 5 --csv \
          --translation {{.translation}} \
        | mlr --c2p --barred cat

  compare-translations:
    silent: true
    desc: compare number of verse, chapters & books count against transalations
    cmds:
      - echo > tmp/status-out.csv
      - for: { var: translations }
        cmd: |
          jq '
          {
            translation: "{{.ITEM}}",
            total_books: (.{{.ITEM}} | keys | length),
            total_chapters: (.{{.ITEM}} | to_entries | map(.value | keys | length) | add),
            total_verses: (.{{.ITEM}} | to_entries | map(.value | to_entries | map(.value | keys | length) | add) | add)
          }' {{.OUTPUT_DIR}}/{{.ITEM}}_bible.json >> tmp/status-out.csv
      - mlr --j2p --barred cat tmp/status-out.csv

  legends:
    desc: legend summary                                           ... task legend
    silent: true
    cmds:
      - |
        mlr --c2p --barred --from {{.entities_csv_file}} \
          count-distinct -f Type \
          then put '
            $Explanation =
              $Type == "PERSON"     ? "Names of individuals" :
              $Type == "DATE"       ? "Explicit or implicit date expressions" :
              $Type == "GPE"        ? "Geopolitical entities (places)" :
              $Type == "ORG"        ? "Organizations or groups" :
              $Type == "OCCUPATION" ? "Roles or professions" :
              $Type == "NORP"       ? "Nationalities, religious or political groups" :
                                      "Other";
          ' \
          then reorder -f Type,count,Explanation

  trips:
    desc: view journesy in map                                    ... task travels
    cmds:
      - |
        uv run main.py trips

  science:
    desc: scientific matters                                      ... task science
    cmds:
      - |
        uv run main.py science

  org:
    desc: show Organizations or groups                             ... task translation=ojb org
    silent: true
    cmds:
      - |
        mlr --csv --from {{.entities_csv_file}}  filter '$Type == "ORG"' > {{.out}}
      - task: out
      - echo "Legend.ORG - Organization or groups"

  occupation:
    silent: true
    desc: show roles or professions
    cmds:
      - |
        mlr --csv --from {{.entities_csv_file}} filter '$Type == "OCCUPATION"'  > {{.out}}
      - task: out

  unique-occupation:
    silent: true
    desc: show roles or professions
    cmds:
      - |
        mlr --csv --from {{.entities_csv_file}} \
          filter '$Type == "OCCUPATION"' \
          then count-distinct -f Text \
          then sort -f Text > {{.out}}
      - task: out

  top-occupations:
    silent: true
    desc: show roles or professions
    cmds:
      - |
        mlr --csv --from {{.entities_csv_file}} \
          filter '$Type == "OCCUPATION"' \
          then count-distinct -f Text \
          then sort -nf count then tail > {{.out}}
      - task: out

  occupation-summary:
    desc: show summary of roles or professions                     ... task translation=ojb occupation-summary
    silent: true
    cmds:
      - |
        # sort by occupation
        echo "top and bottom $(( {{.show_cnt}} / 2)) of sorted by occupation"
        mlr --csv --from {{.entities_csv_file}} \
          filter '$Type == "OCCUPATION"' \
            then cut -f Text \
            then count-distinct -f Text \
            then label occupation,count \
            then sort -f occupation > {{.out}}
      - task: out
      - |
        # sort by count
        printf "\n\n\ntop and bottom $(( {{.show_cnt}} / 2)) of sorted by count\n"
        mlr --csv --from {{.entities_csv_file}} \
          filter '$Type == "OCCUPATION"' \
            then cut -f Text \
            then count-distinct -f Text \
            then label occupation,count \
            then sort -nf count  > {{.out}}
      - task: out

  gpe:
    desc: show Geopolitical entities (places)
    silent: true
    cmds:
      - |
        mlr --csv --from {{.entities_csv_file}} filter '$Type == "GPE"' > {{.out}}
      - task: out
      - echo Legend.GPE - GeoPoliticalEntity

  norp:
    desc: show Nationalities, religious or political groups
    silent: true
    cmds:
      - |
        mlr --csv --from {{.entities_csv_file}} filter '$Type == "NORP"' > {{.out}}
      - task: out
      - echo Legend.NORP - Nationalities Religions or Political Groups

  date-summary:
    silent: true
    desc: show dates mentioned
    cmds:
      - |
        mlr --csv --from {{.entities_csv_file}} \
          filter '$Type == "DATE"' \
            then cut -f Text \
            then count-distinct -f Text \
            then head > {{.out}}
      - task: out

  names:
    silent: true
    desc: show names/persons                                       ... task translation=ojb names
    cmds:
      - |
        mlr --csv --from {{.entities_csv_file}} \
          filter '$Type == "PERSON"' > {{.out}}
      - task: out

  unique-names:
    silent: true
    desc: "show unique names/persons"
    cmds:
      - |
        mlr --csv --from {{.entities_csv_file}} \
          filter '$Type == "PERSON"' \
          then count-distinct -f Text \
          then sort -f Text > {{.out}}
      - task: out

  top-names:
    silent: true
    desc: "show unique names/persons"
    cmds:
      - |
        mlr --csv --from {{.entities_csv_file}} \
          filter '$Type == "PERSON"' \
          then count-distinct -f Text \
          then sort -nf count then tail > {{.out}}
      - task: out

  date:
    silent: true
    desc: "Fetch and format output for DATE=daniel"
    cmds:
      - |
        mlr --csv --from {{.entities_csv_file}} \
          filter  '$Type == "DATE" && $Book == "daniel"' > {{.out}}
      - task: out

  out:
    silent: true
    cmds:
      - |
        total=$(mlr --from {{.out}} --csv --headerless-csv-output count)
        printf "Summary:\n   Total: ${total} records\n"
        top=$(({{.show_cnt}} / 2 + 1))
        btm=$(({{.show_cnt}} / 2 ))

        if [ "$total" -le {{.show_cnt}} ]; then
          # For fewer than or equal to {{.show_cnt}} records, display all
          echo "   Showing all $total records"
          echo -e "   Translation: {{.YELLOW}}{{.translation}} {{.RESET}}"
          cat "{{.out}}" | mlr --c2p --barred cat -n
        else
          # For more than {{.show_cnt}} records, show first ${btm} and last ${btm}
          echo "   Showing {{.show_cnt}} of $total records"
          echo -e "   Translation: {{.YELLOW}}{{.translation}}{{.RESET}}"
          (head -n${top} "{{.out}}" && tail -n${btm} "{{.out}}") | mlr --c2p --barred cat -n
        fi

  # merged from other taskfile - needs cleanup
  clean_symbols:
    cmds:
      - task: semicolon
      - task: comma
      - task: spaces
      - task: remove-symbols
      - task: square-brackets
      - task: special-cases

  special_cases:
    cmds:
      - |
        # Remove only leading or trailing Unicode hyphens (EN DASH and EM DASH), but keep internal hyphens intact
        sed -i "" 's/^[\ââ]\+//; s/[\ââ]\+$//' {{.FILE_PAT}}

  verify-special-cases:
    cmds:
      - |
        words=("âHe" "âI" "2" "âLet" "Mountains" "âSihon" "âThe" "âprovided" "âthat" "ââ" "perishedâthe")

        for word in "${words[@]}" ; do
          echo "$word" | sed 's/^[\ââ]\+//; s/[\ââ]\+$//'
        done

  square-brackets_2:
    cmds:
      - |
        # cleanup these words
        #   [Ayin]In [Ayin]They [Beth]In [Beth]Who [Daleth]And [Daleth]They
        #   [Lamed]12 [Lamed]By [Nun]He [Nun]Trustworthy [Waw]And
        sed -i "" 's/\[.*\]//g;' {{.FILE_PAT}}

  square-brackets:
    cmds:
      - |
        # Remove text within square brackets
        sed -i "" 's/\[[^]]*\]//g' {{.FILE_PAT}}

  remove-unicode-symbols:
    cmds:
      - |
        # Remove symbols including additional Unicode symbols
        sed -i "" 's/[()ââ.;:âÊ¹Â·"!?â×××ï¬×× ××¢]//g' {{.FILE_PAT}}

  remove-symbols:
    cmds:
      - |
        # remove other symbols
        sed -i "" 's/[()ââ.;:âÊ¹Â·"!?â]//g;' {{.FILE_PAT}}

  spaces:
    cmds:
      - |
        sed -i "" "{{.SPACE_PAT}}" {{.FILE_PAT}}

  semicolon:
    cmds:
      - |
        sed -i "" "{{.SEMICOLON_PAT}}" {{.FILE_PAT}}

  comma:
    cmds:
      - |
        sed -i "" "{{.COMMA_PAT}}" {{.FILE_PAT}}

  split:
    cmds:
      - |
        mkdir -p tmp
        # Split words and numbers
        cat {{.FILE_PAT}} | tr ' ' '\n' > analysis/words.list

        # Separate numbers and words
        grep '^[0-9]' analysis/words.list > tmp/numeric.list
        grep '^[^0-9]' analysis/words.list > tmp/words_only.list

        # Process numeric list: sort numerically and count occurrences
        cat tmp/numeric.list | sort -n | uniq -c | sort -k2,2n > tmp/numeric-counts.list

        # Process words list: sort by count (desc), then alphabetically
        cat tmp/words_only.list | sort | uniq -c | sort -k1,1nr -k2,2 > tmp/words-counts.list

        # Combine both lists: numbers first, then words
        cat tmp/words-counts.list tmp/numeric-counts.list > analysis/word_counts.list

  fix-verse-separator:
    cmds:
      - |
        for file in newWorldTranslation/english/2013-release/*/*; do
          sed -E -i '' 's/^1 /1Â /' "$file"
        done

  split-2:
    cmds:
      - |
        cat {{.FILE_PAT}}  | tr ' ' '\n' > analysis/words.list
        cat analysis/words.list | sort | uniq -c | sort -n > analysis/word_counts.list

  analyze:
    cmds:
      - |
        cat -n analysis/word_counts.list

  verify:
    cmds:
      - |
        words=("day,16" "saying,May" "10,100" "10,x" "x,10" "them,Because" "multi   spaces" "greedy one; [Nun]He")

        for word in "${words[@]}" ; do
          echo "$word" \
            | sed "{{.COMMA_PAT}}" \
            | sed "{{.SPACE_PAT}}"
        done
  run: task -p gen_tag gen_lifespan
  gen_tag:
    parellel: true
    cmds:
      - uv run main.py lifespan --tag

  person_lifespan:
    desc: persons with lifespan in bible.json
    cmds:
      - |
        jq -r '
        to_entries[] | .value |
        to_entries[] | .value |
        keys[]' analysis/lifespans.json \
        | sort \
        | uniqÃ¥

  gen_lifespan:
    parellel: true
    cmds:
      - uv run main.py --extract-lifespan

  wc:
    cmds:
      - |
        wc {{.FILE_PAT}}

  refresh_plain_text:
    cmds:
      - |
        rm -rf {{.PLAIN_BASE_DIR}}
        cp -r {{.RAW_BASE_DIR}} {{.PLAIN_BASE_DIR}}

  # ! merged from other taskfile - needs cleanup
